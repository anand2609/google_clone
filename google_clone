import React, { useState, useEffect } from 'react';
import { View, TextInput, StyleSheet, TouchableOpacity, Text } from 'react-native';
import XLSX from 'xlsx';
import RNFS from 'react-native-fs';
import AsyncStorage from '@react-native-async-storage/async-storage';

const GoogleSheetsClone = () => {
  const [gridData, setGridData] = useState([]);

  useEffect(() => {
    loadData();
  }, []);

  useEffect(() => {
    saveData();
  }, [gridData]);

  const loadData = async () => {
    try {
      const storedData = await AsyncStorage.getItem('gridData');
      if (storedData) {
        setGridData(JSON.parse(storedData));
      } else {
        initializeGridData();
      }
    } catch (error) {
      console.log('Error loading data:', error);
      initializeGridData();
    }
  };

  const initializeGridData = () => {
    const rows = 10;
    const cols = 5;
    const initialData = [];
    for (let i = 0; i < rows; i++) {
      const rowData = [];
      for (let j = 0; j < cols; j++) {
        rowData.push('');
      }
      initialData.push(rowData);
    }
    setGridData(initialData);
  };

  const saveData = async () => {
    try {
      await AsyncStorage.setItem('gridData', JSON.stringify(gridData));
    } catch (error) {
      console.log('Error saving data:', error);
    }
  };

  const handleInputChange = (row, col, value) => {
    const updatedGridData = [...gridData];
    updatedGridData[row][col] = value;
    setGridData(updatedGridData);
  };

  const handleDownload = async () => {
    const workbook = XLSX.utils.book_new();
    const worksheet = XLSX.utils.aoa_to_sheet(gridData);
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');
    const excelFile = XLSX.write(workbook, { type: 'base64', bookType: 'xlsx' });

    const path = `${RNFS.DownloadDirectoryPath}/spreadsheet.xlsx`;

    try {
      await RNFS.writeFile(path, excelFile, 'base64');
      alert('Excel file downloaded successfully!');
    } catch (error) {
      console.log('Error saving file:', error);
      alert('Failed to download the Excel file.');
    }
  };

  const renderGrid = () => {
    return gridData.map((row, rowIndex) => (
      <View key={rowIndex} style={styles.row}>
        {row.map((col, colIndex) => (
          <TextInput
            key={colIndex}
            style={styles.cell}
            value={col}
            onChangeText={(text) => handleInputChange(rowIndex, colIndex, text)}
          />
        ))}
      </View>
    ));
  };

  return (
    <View style={styles.container}>
      <View style={styles.navbar}>
        <TouchableOpacity style={styles.downloadButton} onPress={handleDownload}>
          <Text style={styles.buttonText}>Download</Text>
        </TouchableOpacity>
      </View>
      {renderGrid()}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 10,
  },
  navbar: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginBottom: 10,
  },
  downloadButton: {
    backgroundColor: '#2196F3',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 4,
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  row: {
    flexDirection: 'row',
    marginBottom: 10,
  },
  cell: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ccc',
    paddingHorizontal: 10,
    paddingVertical: 8,
  },
});

export default GoogleSheetsClone;
